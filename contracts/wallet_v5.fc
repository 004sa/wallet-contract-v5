#pragma version =0.4.4;

;; =====================================================================================================================
;; Improvements log:                                           EXT  INT  EXTN TOTAL | SAVE (PERC%)
;;     INITIAL                                                 3235 4210 2760 10250 |    0 (0.00%)
;;     Optimized unneccessary cell loads and operations        3185 4014 2744  9943 |  262 (2.56%)
;;     Removed unneccessary always true check                  3185 3823 2501  9509 |  741 (7.23%)
;;     Unrolled the common internal handler code               3185 3700 2373  9258 |  992 (9.68%) << hey, almost 1000!
;;     Implicitly return from the external handler             3165 3700 2373  9238 | 1012 (9.87%) << 1000 gas get!
;;     Reaped benefits of separated internal loaders           3165 3700 2295  9160 | 1090 (10.6%) << 10% get!
;;     Discarded unneccessary slice remains in dispatcher      3155 3690 2285  9130 | 1120 (10.9%)
;;     Loaded auth_kind optionally using LDUQ instruction      3155 3654 2249  9058 | 1192 (11.6%) << black magic begins
;;     Is ifnot a joke for you? (emits less instructions)      3155 3654 2231  9040 | 1210 (11.8%)

#include "imports/stdlib.fc";

;; LDUQ: s - x s' -1 or s 0 --NULLROTRIFNOT--> s - x s' -1 or # s 0
(int, slice, int) try_load_uint32(slice s) asm "32 LDUQ" "NULLROTRIFNOT";

;; Extensible wallet contract v5

;; Compresses 8+256-bit address into 256-bit uint by cutting off one bit from sha256.
;; This allows us to save on wrapping the address in a cell and make plugin requests cheaper.
;; This method also unpacks address hash if you pass packed hash with the original wc.
int pack_address(int wc, int hash) impure asm "SWAP INC XOR"; ;; hash ^ (wc+1)

;; Stores pre-computed list of actions (mostly `action_send_msg`) in the actions register.
() set_actions(cell action_list) impure asm "c5 POP";

;; Dispatches already authenticated request.
() dispatch_request(slice cs, int stored_seqno, int stored_subwallet, int public_key, slice immutable_tail) impure inline {
  var extensions = null(); ;; initialize with null, it will be replaced with dict if needed to be used

  ;; Recurse into extended actions until we reach standard actions
  while (cs~load_uint(1)) {
    int op = cs~load_uint(32);

    ;; Raw set_data
    if (op == 0x1ff8ea0b) {
      set_data(cs~load_ref());
    }

    ;; Add/remove extensions
    if ((op == 0x1c40db9f) | (op == 0x5eaef4a4)) {
      (int wc, int hash) = parse_std_addr(cs~load_msg_addr());
      int packed_addr = pack_address(wc, hash);

      ifnot (immutable_tail.slice_empty?()) {
        immutable_tail = immutable_tail.skip_bits(80 + 256);
        extensions = immutable_tail~load_dict();
        ;; ds.end_parse() guarantees that there is no more data in immutable_tail
      }

      ;; Add extension
      if (op == 0x1c40db9f) {
        (extensions, int success?) = extensions.udict_add_builder?(256, packed_addr, begin_cell().store_int(wc,8));
        throw_unless(39, success?);
      }
      ;; Remove extension
      if (op == 0x5eaef4a4) {
        (extensions, int success?) = extensions.udict_delete?(256, packed_addr);
        throw_unless(40, success?);
      }

      ;; couldn't use immutable_tail even if wanted to
      set_data(begin_cell()
              .store_uint(stored_seqno, 32)
              .store_uint(stored_subwallet, 80)
              .store_uint(public_key, 256)
              .store_dict(extensions)
              .end_cell());
    }

    ;; Other actions are no-op
    ;; FIXME: is it costlier to check for unsupported actions and throw?
    cs = cs.preload_ref().begin_parse();
  }
  ;; At this point we are at `action_list_basic$0 {n:#} actions:^(OutList n) = ActionList n 0;`
  ;; Simply set the C5 register with all pre-computed actions:
  set_actions(cs.preload_ref());
  return ();
}

;; Verifies signed request, prevents replays and proceeds with `dispatch_request`.
() process_signed_request(slice body, int stored_seqno, int stored_subwallet, int public_key, slice immutable_tail) impure inline {
  var signature = body~load_bits(512);
  var cs = body;
  var (subwallet_id, valid_until, msg_seqno) = (cs~load_uint(80), cs~load_uint(32), cs~load_uint(32));

  throw_if(36, valid_until <= now());
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, subwallet_id == stored_subwallet);
  throw_unless(35, check_signature(slice_hash(body), signature, public_key));

  accept_message();

  ;; Store and commit the seqno increment to prevent replays even if the subsequent requests fail.
  stored_seqno = stored_seqno + 1;
  set_data(begin_cell()
          .store_uint(stored_seqno, 32)
          .store_slice(immutable_tail)
          ;;  .store_uint(stored_subwallet, 80)
          ;;  .store_uint(public_key, 256)
          ;;  .store_dict(extensions)
          .end_cell());

  commit();

  dispatch_request(cs, stored_seqno, stored_subwallet, public_key, immutable_tail);
}

() recv_external(slice body) impure {
  var ds = get_data().begin_parse();
  var stored_seqno = ds~load_uint(32);
  var immutable_tail = ds; ;; keep immutable tail for fast commit storage and extensions retrieval if needed
  var (stored_subwallet, public_key) = (ds~load_uint(80), ds~load_uint(256));
  ds.skip_dict().end_parse(); ;; do not load extensions right away, mostly they will not be needed
  int auth_kind = body~load_uint(32);
  if (auth_kind == 0x7369676E) { ;; "sign"
    process_signed_request(body, stored_seqno, stored_subwallet, public_key, immutable_tail);
    return();
  } else {
    ;; FIXME: probably need to throw here?
    return ();
  }
}

() recv_internal(int msg_value, cell full_msg, slice body) impure {
  var full_msg_slice = full_msg.begin_parse();
  var flags = full_msg_slice~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddressInt ...
  if (flags & 1) {
    ;; ignore all bounced messages
    return ();
  }
  (int auth_kind, body, int success) = body.try_load_uint32(); ;; why there is no such stuff built in compiler?
  ifnot (success) {
    ;; ignore simple transfers
    return ();
  }

  ;; We accept two kinds of authenticated messages:
  ;; - 0x6578746E "extn" authenticated by extension
  ;; - 0x7369676E "sign" authenticated by signature

  ;; Since the space is not of concern... duplicating common code down into branches saves some gas!

  if (auth_kind == 0x6578746E) { ;; "extn"

    var ds = get_data().begin_parse();
    var stored_seqno = ds~load_uint(32);
    var immutable_tail = ds; ;; keep immutable tail for fast commit storage and extensions retrieval if needed
    var (stored_subwallet, public_key, extensions) = (ds~load_uint(80), ds~load_uint(256), ds~load_dict());
    ds.end_parse(); ;; here we actually need the extensions 100%

    ;; Authenticate extension by its address.
    int packed_sender_addr = pack_address(parse_std_addr(full_msg_slice~load_msg_addr()));
    var (_, success?) = extensions.udict_get?(256, packed_sender_addr);
    ifnot (success?) {
      ;; Note that some random contract may have deposited funds with this prefix,
      ;; so we accept the funds silently instead of throwing an error (wallet v4 does the same).
      return ();
    }
    dispatch_request(body, stored_seqno, stored_subwallet, public_key, immutable_tail);
    return ();
  }

  if (auth_kind == 0x7369676E) { ;; "sign"

    var ds = get_data().begin_parse();
    var stored_seqno = ds~load_uint(32);
    var immutable_tail = ds; ;; keep immutable tail for fast commit storage and extensions retrieval if needed
    var (stored_subwallet, public_key) = (ds~load_uint(80), ds~load_uint(256));
    ds.skip_dict().end_parse(); ;; do not load extensions right away, mostly they will not be needed

    ;; Process the rest of the slice just like the signed request.
    process_signed_request(body, stored_seqno, stored_subwallet, public_key, immutable_tail);
    return (); ;; Explicit returns escape function faster and const less gas (suddenly!)
  }
}


;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int get_wallet_id() method_id {
  return get_data().begin_parse().skip_bits(32).preload_uint(80);
}

int get_public_key() method_id {
  var cs = get_data().begin_parse().skip_bits(32 + 80);
  return cs.preload_uint(256);
}

;; Returns raw dictionary (or null if empty) where keys are packed addresses and the `wc` is stored in leafs.
;; User should unpack the address using the same packing function using `wc` to restore the original address.
cell get_extensions() method_id {
  var ds = get_data().begin_parse().skip_bits(32 + 80 + 256);
  return ds~load_dict();
}
